const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è promisified exec
function execPromise(cmd) {
  return new Promise((resolve) => {
    exec(cmd, (err, stdout) => {
      if (err) return resolve(null);
      resolve(stdout);
    });
  });
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–≤–æ–¥–∞ mdls
function extractValue(mdlsOutput) {
  if (!mdlsOutput) return 'N/A';
  const parts = mdlsOutput.split('=');
  return parts[1]?.trim().replace(/"/g, '') || 'N/A';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–ø–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function getFolderSize(appPath) {
  return new Promise((resolve) => {
    exec(`du -sh "${appPath}"`, (err, stdout) => {
      if (err) return resolve('N/A');
      const size = stdout.split('\t')[0];
      resolve(size);
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
function checkCodeSignature(appPath) {
  return new Promise((resolve) => {
    exec(`codesign -dv "${appPath}" 2>&1`, (err, stdout) => {
      if (err || !stdout.includes('Authority=')) return resolve('‚ùå –ù–µ—Ç');
      resolve('‚úÖ –î–∞');
    });
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
async function getAppDetails(appPath) {
  const nameCmd = `mdls -name kMDItemDisplayName "${appPath}"`;
  const versionCmd = `mdls -name kMDItemVersion "${appPath}"`;
  const bundleCmd = `defaults read "${path.join(appPath, 'Contents/Info')}" CFBundleIdentifier`;
  const lastUsedCmd = `mdls -name kMDItemLastUsedDate "${appPath}"`;
  const categoryCmd = `mdls -name kMDItemAppCategory "${appPath}"`;

  const [name, version, bundleId, lastUsed, category, signed, size] = await Promise.all([
    execPromise(nameCmd),
    execPromise(versionCmd),
    execPromise(bundleCmd),
    execPromise(lastUsedCmd),
    execPromise(categoryCmd),
    checkCodeSignature(appPath),
    getFolderSize(appPath),
  ]);

  console.log(`üì¶ ${extractValue(name)}`);
  console.log(`   üî¢ –í–µ—Ä—Å–∏—è: ${extractValue(version)}`);
  console.log(`   üÜî Bundle ID: ${bundleId?.trim() || 'N/A'}`);
  console.log(`   üìÅ –ü—É—Ç—å: ${appPath}`);
  console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${extractValue(lastUsed)}`);
  console.log(`   üß© –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${extractValue(category)}`);
  console.log(`   üñäÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–æ: ${signed}`);
  console.log(`   üíæ –†–∞–∑–º–µ—Ä: ${size}`);
  console.log('--------------------------------------------------------');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Mac
exec('mdfind "kMDItemContentType == \'com.apple.application-bundle\'"', async (error, stdout) => {
  if (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${error}`);
    return;
  }

  const appPaths = stdout.split('\n').filter(p => p.endsWith('.app')).slice(0, 30); // –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å slice

  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${appPaths.length}\n`);
  for (const appPath of appPaths) {
    await getAppDetails(appPath);
  }
});
  