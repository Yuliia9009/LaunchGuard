const axios = require('axios');
const psList = require('ps-list').default;
const { exec } = require('child_process');
const { decodeToken, isTokenExpired } = require('./tokenUtils'); 
const { logBlockedProcessToServer } = require('./logService');  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä

const API_URL = 'http://localhost:5285/api/blacklist';

// üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
const killProcess = (pid) => {
    const command = process.platform === 'win32' ? `taskkill /F /PID ${pid}` : `kill -9 ${pid}`;

    console.log(`üì¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: ${command}`);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}: ${error.message}`);
            console.error(`‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${stderr}`);
            return;
        }
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.`);
    });
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
const fetchBlacklist = async () => {
    try {
        const response = await axios.get(API_URL, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        console.log('‚úÖ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.');
        return response.data; 
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error.message);
        return [];
    }
};

// üìå –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
const startBlocking = (getToken) => {
    console.log('üì¢ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.');

    setInterval(async () => {
        const token = getToken();  

        const blacklist = await fetchBlacklist(); 

        if (blacklist.length === 0) {
            console.log('‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
            return;
        }

        try {
            const processes = await psList();
            console.log('üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

            const blockedProcesses = processes.filter(process =>
                blacklist.some(item => process.name.toLowerCase().includes(item.programName.toLowerCase()))
            );

            blockedProcesses.forEach(process => {
                console.log(`‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å: ${process.name} (PID: ${process.pid})`);
                killProcess(process.pid);  

                // ‚úÖ –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
                logBlockedProcessToServer(process.name, token);  
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error.message);
        }
    }, 2000); 
};

module.exports = { startBlocking };

// const axios = require('axios');
// const psList = require('ps-list').default;
// const { exec } = require('child_process');
// const fs = require('fs');
// const { decodeToken, isTokenExpired } = require('./tokenUtils'); 

// const API_URL = 'http://localhost:5285/api/blacklist';

// // üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
// const killProcess = (pid) => {
//     const command = process.platform === 'win32' ? `taskkill /F /PID ${pid}` : `kill -9 ${pid}`;

//     exec(command, (error, stdout, stderr) => {
//         if (error) {
//             console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}: ${error.message}`);
//             return;
//         }
//         console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.`);
//     });
// };

// // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
// const fetchBlacklist = async () => {
//     try {
//         const response = await axios.get(API_URL, {
//             headers: {
//                 'Content-Type': 'application/json'
//             }
//         });
//         console.log('‚úÖ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.');
//         return response.data; 
//     } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error.message);
//         return [];
//     }
// };

// // üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ñ–∞–π–ª
// const logBlockedProcessToFile = (programName, pid, token) => {
//     try {
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
//         if (isTokenExpired(token)) {
//             console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.');
//             return;
//         }

//         // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å userId
//         const userId = decodeToken(token);  

//         const logMessage = `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${programName}, PID: ${pid}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}, –í—Ä–µ–º—è: ${new Date().toISOString()}\n`;

//         // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª
//         fs.appendFile('blocked_processes.log', logMessage, (err) => {
//             if (err) {
//                 console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª:', err);
//             } else {
//                 console.log('‚úÖ –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª.');
//             }
//         });
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:', error.message);
//     }
// };

// // üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// const logBlockedProcessToServer = async (programName, token) => {  
//     try {
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
//         if (isTokenExpired(token)) {
//             console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.');
//             return;
//         }

//         // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å userId
//         const userId = decodeToken(token); 

//         const logEntry = {
//             ProgramName: programName,
//             AttemptTime: new Date().toISOString(),
//             UserId: userId, 
//         };

//         console.log('üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', logEntry);

//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
//         const response = await axios.post('http://localhost:5285/api/logs', logEntry, {
//             headers: {
//                 'Authorization': `Bearer ${token}`,
//                 'Content-Type': 'application/json',
//             },
//         });

//         if (response.status === 201) {
//             console.log('‚úÖ –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ë–î.');
//         } else {
//             console.log(`‚ö†Ô∏è –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: ${response.status}`);
//         }
//     } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
//     }
// };

// // üìå –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
// const startBlocking = (getToken) => {
//     console.log('üì¢ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.');

//     setInterval(async () => {
//         const token = getToken();  

//         const blacklist = await fetchBlacklist(); 

//         if (blacklist.length === 0) {
//             console.log('‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
//             return;
//         }

//         try {
//             const processes = await psList();
//             console.log('üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

//             const blockedProcesses = processes.filter(process =>
//                 blacklist.some(item => process.name.toLowerCase().includes(item.programName.toLowerCase()))
//             );

//             blockedProcesses.forEach(process => {
//                 console.log(`‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å: ${process.name} (PID: ${process.pid})`);
//                 killProcess(process.pid);  

//                 // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç–∞–∫ –∏ –≤ —Ñ–∞–π–ª
//                 logBlockedProcessToFile(process.name, process.pid, token); 
//                 logBlockedProcessToServer(process.name, token);  
//             });
//         } catch (error) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error.message);
//         }
//     }, 2000); 
// };

// module.exports = { startBlocking };