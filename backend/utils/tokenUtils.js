const { jwtDecode } = require('jwt-decode');

// üìå –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –∏—â–µ–º userId
const decodeToken = (token) => {
  try {
    console.log('jwtDecode:', jwtDecode);
    console.log('üì¢ –¢–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', token);
    const decodedToken = jwtDecode(token);  
    console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodedToken);

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ userId —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
    const userId = decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier']
                || decodedToken['nameid']  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–µ–π–º ASP.NET Core
                || decodedToken['UserId']  // –ï—Å–ª–∏ —Ç—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–µ–π–º
                || decodedToken['sub'];    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JWT –∫–ª–µ–π–º

    if (!userId) {
      throw new Error('userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ');
    }
    
    return userId;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
// 
const isTokenExpired = (token) => {
  try {
      console.log('üì¢ –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º:', token);

      if (!token || typeof token !== 'string') {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞.');
      }

      if (token.split('.').length !== 3) {
          throw new Error('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏.');
      }

      const decoded = jwtDecode(token);
      console.log('‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decoded);

      const expirationDate = decoded.exp * 1000; 
      const currentDate = Date.now();
      
      if (currentDate > expirationDate) {
          console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
          return true;
      }
      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      return false;
  } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
      return true;
  }
};  

module.exports = { decodeToken, isTokenExpired };

// const axios = require('axios');
// const jwtDecode = require('jwt-decode');  

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è userId
// const decodeToken = (token) => {
//   try {
//     const decodedToken = jwtDecode(token);  
//     console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodedToken);
//     const userId = decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier']; 
//     return userId;
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
//     throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
//   }
// };

// // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
// const isTokenExpired = (token) => {
//     const decoded = jwtDecode(token);  
//     const expirationDate = decoded.exp * 1000; 
//     const currentDate = Date.now();
    
//     if (currentDate > expirationDate) {
//       console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
//       return true;
//     }
//     console.log('–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
//     return false;
//   };  

// module.exports = { decodeToken, isTokenExpired };