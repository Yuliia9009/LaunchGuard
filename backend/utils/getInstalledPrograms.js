const { exec } = require('child_process');
const axios = require('axios');
const path = require('path');
const fs = require('fs');  

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
function execPromise(cmd) {
    return new Promise((resolve, reject) => {
        exec(cmd, (err, stdout, stderr) => {
            if (err) {
                reject(stderr || err);
            }
            resolve(stdout);
        });
    });
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã mdls
function extractValue(mdlsOutput) {
    if (!mdlsOutput) return 'N/A';
    const parts = mdlsOutput.split('=');
    return parts[1]?.trim().replace(/"/g, '') || 'N/A';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
function checkFileExists(filePath) {
    return new Promise((resolve) => {
        fs.access(filePath, fs.constants.F_OK, (err) => {
            resolve(!err);
        });
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –ü–ö
async function getInstalledPrograms() {
    const stdout = await execPromise('mdfind "kMDItemContentType == \'com.apple.application-bundle\'" -onlyin /Applications');
    const userAppStdout = await execPromise('mdfind "kMDItemContentType == \'com.apple.application-bundle\'" -onlyin ~/Applications');
    
    const appPaths = stdout.split('\n').concat(userAppStdout.split('\n')).filter(p => p.endsWith('.app')).slice(0, 500);
    
    const detailedPrograms = await Promise.all(appPaths.map(async (appPath) => {
        const nameCmd = `mdls -name kMDItemDisplayName "${appPath}"`;
        const versionCmd = `mdls -name kMDItemVersion "${appPath}"`;
        const bundleCmd = `defaults read "${path.join(appPath, 'Contents/Info')}" CFBundleIdentifier`;

        let name = 'N/A';
        let version = '0'; 
        let bundleId = 'N/A';

        const plistFilePath = path.join(appPath, 'Contents/Info.plist');
        const fileExists = await checkFileExists(plistFilePath);

        if (!fileExists) {
            console.error(`‚ö†Ô∏è –§–∞–π–ª Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${appPath}`);
            return {
                ProgramName: name,
                Version: version,
                BundleId: bundleId,
                ProgramPath: appPath,
                InstalledAt: new Date().toISOString()
            };
        }

        try {
            const nameResult = await execPromise(nameCmd);
            name = extractValue(nameResult);
        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è ${appPath}: ${error.message}`);
        }

        try {
            const versionResult = await execPromise(versionCmd);
            version = extractValue(versionResult);
        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è ${appPath}: ${error.message}`);
        }

        try {
            const bundleResult = await execPromise(bundleCmd);
            bundleId = bundleResult?.trim() || 'N/A';
        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CFBundleIdentifier –¥–ª—è ${appPath}: ${error.message}`);
        }

        return {
            ProgramName: name,
            Version: version,
            BundleId: bundleId,
            ProgramPath: appPath,
            InstalledAt: new Date().toISOString()
        };
    }));

    return detailedPrograms.filter(program => program.ProgramName !== 'N/A');
}

// üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function sendProgramsToServer(programs, token) {
    try {
        const response = await axios.post('http://localhost:5285/api/installedprograms/save', programs, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        console.log('–ü—Ä–æ–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
    }
}

// üìå –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function main(token) { // <-- –î–æ–±–∞–≤–ª—è–µ–º token –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    try {
        const programs = await getInstalledPrograms();
        if (programs.length > 0) {
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${programs.length} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.`);
            await sendProgramsToServer(programs, token);  // <-- –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        } else {
            console.log('–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º:', error.message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
module.exports = {
    main,
    getInstalledPrograms,
    sendProgramsToServer
};


// const { exec } = require('child_process');
// const axios = require('axios');
// const path = require('path');
// const fs = require('fs');  

// // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
// function execPromise(cmd) {
//     return new Promise((resolve, reject) => {
//         exec(cmd, (err, stdout, stderr) => {
//             if (err) {
//                 reject(stderr || err);
//             }
//             resolve(stdout);
//         });
//     });
// }

// // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã mdls
// function extractValue(mdlsOutput) {
//     if (!mdlsOutput) return 'N/A';
//     const parts = mdlsOutput.split('=');
//     return parts[1]?.trim().replace(/"/g, '') || 'N/A';
// }

// // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
// function checkFileExists(filePath) {
//     return new Promise((resolve) => {
//         fs.access(filePath, fs.constants.F_OK, (err) => {
//             resolve(!err);
//         });
//     });
// }

// // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –ü–ö
// async function getInstalledPrograms() {
//     const stdout = await execPromise('mdfind "kMDItemContentType == \'com.apple.application-bundle\'" -onlyin /Applications');
//     const userAppStdout = await execPromise('mdfind "kMDItemContentType == \'com.apple.application-bundle\'" -onlyin ~/Applications');
    
//     const appPaths = stdout.split('\n').concat(userAppStdout.split('\n')).filter(p => p.endsWith('.app')).slice(0, 500);
    
//     // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
//     const detailedPrograms = await Promise.all(appPaths.map(async (appPath) => {
//         const nameCmd = `mdls -name kMDItemDisplayName "${appPath}"`;
//         const versionCmd = `mdls -name kMDItemVersion "${appPath}"`;
//         const bundleCmd = `defaults read "${path.join(appPath, 'Contents/Info')}" CFBundleIdentifier`;

//         let name = 'N/A';
//         let version = '0'; 
//         let bundleId = 'N/A';

//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ Info.plist –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
//         const plistFilePath = path.join(appPath, 'Contents/Info.plist');
//         const fileExists = await checkFileExists(plistFilePath);

//         if (!fileExists) {
//             console.error(`‚ö†Ô∏è –§–∞–π–ª Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${appPath}`);
//             return {
//                 ProgramName: name,
//                 Version: version,
//                 BundleId: bundleId,
//                 ProgramPath: appPath,
//                 InstalledAt: new Date().toISOString()
//             };
//         }

//         // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
//         try {
//             const nameResult = await execPromise(nameCmd);
//             name = extractValue(nameResult);
//         } catch (error) {
//             console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è ${appPath}: ${error.message}`);
//         }

//         // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã
//         try {
//             const versionResult = await execPromise(versionCmd);
//             version = extractValue(versionResult);
//         } catch (error) {
//             console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è ${appPath}: ${error.message}`);
//         }

//         // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å CFBundleIdentifier
//         try {
//             const bundleResult = await execPromise(bundleCmd);
//             bundleId = bundleResult?.trim() || 'N/A';
//         } catch (error) {
//             console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CFBundleIdentifier –¥–ª—è ${appPath}: ${error.message}`);
//         }

//         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
//         return {
//             ProgramName: name,
//             Version: version,
//             BundleId: bundleId,
//             ProgramPath: appPath,
//             InstalledAt: new Date().toISOString()
//         };
//     }));

//     // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
//     return detailedPrograms.filter(program => program.ProgramName !== 'N/A');
// }

// // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// async function sendProgramsToServer(programs) {
//     try {
//         const response = await axios.post('http://localhost:5285/api/installedprograms/save', programs, {
//             headers: {
//                 'Content-Type': 'application/json',
//             }
//         });
//         console.log('–ü—Ä–æ–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', response.data);
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
//     }
// }

// // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
// async function main() {
//     try {
//         const programs = await getInstalledPrograms();
//         if (programs.length > 0) {
//             console.log(`–ù–∞–π–¥–µ–Ω–æ ${programs.length} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.`);
//             await sendProgramsToServer(programs);
//         } else {
//             console.log('–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
//         }
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º:', error);
//     }
// }

// // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
// module.exports = {
//     main,
//     getInstalledPrograms,
//     sendProgramsToServer
// };