const axios = require('axios');
const { decodeToken, isTokenExpired } = require('./tokenUtils'); 
console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ isTokenExpired:', isTokenExpired);

const API_URL = 'http://localhost:5285/api/log';  

// üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
const logBlockedProcessToServer = async (programName, token) => {  
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        if (isTokenExpired(token)) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.');
            return;
        }

        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        const userId = decodeToken(token); 

        if (!userId) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å userId –∏–∑ —Ç–æ–∫–µ–Ω–∞.');
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const logEntry = {
            ProgramName: programName,
            AttemptTime: new Date().toISOString(),
            UserId: userId
        };

        console.log('üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', logEntry);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ASP.NET Core —Å–µ—Ä–≤–µ—Ä
        const response = await axios.post(API_URL, logEntry, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
            },
        });

        if (response.status === 201) {
            console.log('‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
        } else {
            console.log(`‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
    }
};

module.exports = { logBlockedProcessToServer };