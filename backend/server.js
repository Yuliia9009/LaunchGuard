const express = require('express');
const cors = require('cors');
const { startBlocking } = require('./utils/fetchBlacklist');
const { main } = require('./utils/getInstalledPrograms');
const { getSystemInfo } = require('./utils/systemInfo');
const { jwtDecode } = require('jwt-decode');

const app = express();
const port = 3001;

app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3001'],
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

app.use(express.json());

let JWT_TOKEN = '';  

// üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.post('/save-token', (req, res) => {
  const token = req.body.token;

  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π.');
    return res.status(400).send('–¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π');
  }

  console.log('üì¢ –¢–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ `axios`:', token);  // <-- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

  JWT_TOKEN = token; 
  console.log('üì¢ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ Node.js —Å–µ—Ä–≤–µ—Ä–µ:', JWT_TOKEN);
  res.sendStatus(200);
});

// üìå Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
const verifyToken = (req, res, next) => {
  if (!JWT_TOKEN) {
    return res.status(401).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }

  try {
    console.log('jwtDecode:', jwtDecode);
    console.log('üì¢ –¢–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', token);
    const decoded = jwtDecode(JWT_TOKEN);
    const currentTime = Math.floor(Date.now() / 1000); // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    if (decoded.exp && decoded.exp < currentTime) {
      console.warn('[‚ö†Ô∏è TokenChecker] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º logout');
      return res.status(401).send('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
    }

    req.userId = decoded['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier']
              || decoded['userId'] 
              || decoded['nameid']; 

    if (!req.userId) {
      return res.status(401).send('userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ');
    }

    console.log('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω, userId:', req.userId);
    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    return res.status(401).send('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
  }
};

// üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
app.get('/system-info', (req, res) => {
  try {
      const systemInfo = getSystemInfo();
      res.json(systemInfo);
  } catch (error) {
      res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ.');
  }
});

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º middleware –¢–û–õ–¨–ö–û –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/protected', verifyToken);  

// üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–≤–Ω—É—Ç—Ä–∏ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞)
app.post('/protected/start-blocking', (req, res) => {
  try {
    startBlocking(() => JWT_TOKEN);  
    res.send('‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.');
  } catch (error) {
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
  }
});

// üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º (–≤–Ω—É—Ç—Ä–∏ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞)
app.post('/protected/start-main', async (req, res) => {
  try {
    await main();
    res.send('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
  } catch (error) {
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.');
  }
});

// ‚úÖ –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
app.use(verifyToken); // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è userId
startBlocking(() => JWT_TOKEN);  

// üì¢ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º
main().then(() => {
  console.log('–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö:', err);
});

// üì¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});


// const express = require('express');
// const cors = require('cors');
// const { startBlocking } = require('./utils/fetchBlacklist');
// const { main } = require('./utils/getInstalledPrograms');
// const jwtDecode = require('jwt-decode'); 

// const app = express();
// const port = 3001;

// app.use(cors({
//   origin: ['http://localhost:3000', 'http://localhost:3001'],
//   methods: ['GET', 'POST'],
//   allowedHeaders: ['Content-Type', 'Authorization'],
// }));

// app.use(express.json());

// let JWT_TOKEN = '';  

// // üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// app.post('/save-token', (req, res) => {
//   const token = req.body.token;
//   if (!token) {
//     return res.status(400).send('–¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
//   }

//   JWT_TOKEN = token; 
//   console.log('üì¢ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ Node.js —Å–µ—Ä–≤–µ—Ä–µ:', JWT_TOKEN);
//   res.sendStatus(200);
// });

// // üìå Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
// const verifyToken = (req, res, next) => {
//   if (!JWT_TOKEN) {
//     return res.status(401).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
//   }

//   try {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
//     const decoded = jwtDecode(JWT_TOKEN);
//     const currentTime = Math.floor(Date.now() / 1000); // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
//     if (decoded.exp && decoded.exp < currentTime) {
//       console.warn('[‚ö†Ô∏è TokenChecker] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º logout');
//       return res.status(401).send('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
//     }

//     // –î–æ–±–∞–≤–ª—è–µ–º userId –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥—Ä—É–≥–∏—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö
//     req.userId = decoded['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'];
//     console.log('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω, userId:', req.userId);
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
//     return res.status(401).send('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
//   }

//   next();
// };

// // ‚úÖ –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
// app.use(verifyToken); // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è userId
// startBlocking(() => JWT_TOKEN);  

// // üì¢ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º
// main().then(() => {
//   console.log('–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
// }).catch(err => {
//   console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö:', err);
// });

// app.listen(port, () => {
//   console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
// });